{"version":3,"sources":["components/ColorItem.js","context/colorContext.js","components/Home.js","components/Navbar.js","context/colorReducer.js","context/types.js","context/colorState.js","App.js","serviceWorker.js","index.js"],"names":["ColorItem","props","color","hex","rgb","className","key","style","backgroundColor","ColorContext","createContext","Home","colorContext","useContext","colors","filtered","map","Navbar","filterColors","clearFilter","sort_alpha","sort_alpha_filtered","sort_rgb","filter","useRef","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","role","aria-haspopup","onClick","event","ref","placeholder","onChange","current","value","target","state","action","regex","RegExp","payload","match","sortedByAlpha","sort","a","b","reverse","sortedByRGB","ColorState","hex_json","require","rgb_json","color_array_rgb","color_array","Object","entries","color_obj","push","i","length","j","initialState","useReducer","ColorReducer","dispatch","Provider","sorted","text","children","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6c0343fd.chunk.js","sourcesContent":["import React from \"react\";\n\nconst ColorItem = props => {\n  const { color, hex, rgb } = props.color;\n  return (\n    <div\n      className=\"color-item color col-xs-12 col-sm-6 col-md-4 col-xl-2 text-center\"\n      key={color.color}\n      style={{\n        backgroundColor: color\n      }}\n    >\n      <div className=\"container info pt-4\">\n        <h3> {color} </h3>\n        <h3> {hex} </h3>\n        <h4>\n          ({rgb[0]},{rgb[1]},{rgb[2]})\n        </h4>\n      </div>\n    </div>\n  );\n};\n\nexport default ColorItem;\n","import { createContext } from \"react\";\n\nconst ColorContext = createContext();\n\nexport default ColorContext;\n","import React, { useContext, Fragment } from \"react\";\nimport ColorItem from \"./ColorItem\";\n\nimport ColorContext from \"../context/colorContext\";\n\nconst Home = () => {\n  const colorContext = useContext(ColorContext);\n\n  const { colors, filtered } = colorContext;\n\n  return (\n    <Fragment>\n      <div className=\"row w-100 m-0\">\n        {filtered !== null\n          ? filtered.map(color => (\n              <ColorItem key={color.color} color={color}></ColorItem>\n            ))\n          : colors.map(color => (\n              <ColorItem key={color.color} color={color}></ColorItem>\n            ))}\n      </div>\n    </Fragment>\n  );\n};\n\nexport default Home;\n","import React, { useContext, useRef } from \"react\";\nimport ColorContext from \"../context/colorContext\";\n\nconst Navbar = () => {\n  const colorContext = useContext(ColorContext);\n  const {\n    filterColors,\n    clearFilter,\n    filtered,\n    sort_alpha_filtered,\n    sort_alpha,\n    sort_rgb\n  } = colorContext;\n  const filter = useRef(\"\");\n\n  const onChange = event => {\n    if (filter.current.value !== \"\") {\n      filterColors(event.target.value);\n    } else {\n      clearFilter();\n    }\n  };\n\n  const sortAlpha = () => {\n    sort_alpha();\n  };\n\n  const sortRGB = event => {\n    sort_rgb();\n  };\n\n  return (\n    <div className=\"sticky-top\">\n      <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark pl-5\">\n        <a className=\"navbar-brand\" href=\"/\">\n          <i className=\"fas fa-fill-drip pr-2\"></i>\n          CSS Color Visualizer\n        </a>\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-toggle=\"collapse\"\n          data-target=\"#navbarSupportedContent\"\n          aria-controls=\"navbarSupportedContent\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n\n        <div className=\"collapse navbar-collapse \" id=\"navbarSupportedContent\">\n          <ul className=\"navbar-nav mr-auto\">\n            <li className=\"nav-item\">\n              <a\n                className=\"nav-link\"\n                id=\"navbarDropdown\"\n                role=\"button\"\n                data-toggle=\"collapse\"\n                data-target=\".multi-collapse\"\n                aria-haspopup=\"true\"\n                aria-expanded=\"false\"\n                aria-controls=\"sortOpt1 sortOpt2\"\n              >\n                Sort\n              </a>\n            </li>\n            <div className=\"collapse multi-collapse\" id=\"sortOpt1\">\n              <li className=\"nav-item\">\n                <a className=\"nav-link\" href=\"#\" onClick={sortAlpha}>\n                  Alphabetically\n                </a>\n              </li>\n            </div>\n            <div className=\"collapse multi-collapse\" id=\"sortOpt2\">\n              <li className=\"nav-item\">\n                <a className=\"nav-link\" href=\"#\" onClick={sortRGB}>\n                  RGB\n                </a>\n              </li>\n            </div>\n            <div className=\"collapse multi-collapse\" id=\"sortOpt3\">\n              <li className=\"nav-item\">\n                <a className=\"nav-link\" href=\"#\">\n                  Something else here\n                </a>\n              </li>\n            </div>\n          </ul>\n\n          <form className=\"form-inline my-2 my-lg-0\">\n            <input\n              className=\"form-control mr-sm-2\"\n              type=\"search\"\n              ref={filter}\n              placeholder=\"Filter! e.g. 'light', 'blue'\"\n              aria-label=\"Search\"\n              onChange={onChange}\n            />\n          </form>\n        </div>\n      </nav>\n    </div>\n  );\n};\n\nexport default Navbar;\n","import { FILTER_COLORS, CLEAR_FILTER, SORT_ALPHA, SORT_RGB } from \"./types\";\n\nexport default (state, action) => {\n  switch (action.type) {\n    case FILTER_COLORS:\n      return {\n        ...state,\n        filtered: state.colors.filter(color => {\n          const regex = new RegExp(`${action.payload}`, \"gi\");\n          return color.color.match(regex);\n        })\n      };\n    case CLEAR_FILTER:\n      return {\n        ...state,\n        filtered: null\n      };\n    case SORT_ALPHA:\n      if (state.sortedByAlpha) {\n        state.colors.sort((a, b) => (a.color > b.color ? 1 : -1)).reverse();\n        if (state.filtered !== null) {\n          state.filtered.sort((a, b) => (a.color > b.color ? 1 : -1)).reverse();\n        }\n      } else {\n        state.colors.sort((a, b) => (a.color > b.color ? 1 : -1));\n        if (state.filtered !== null) {\n          state.filtered.sort((a, b) => (a.color > b.color ? 1 : -1));\n        }\n      }\n\n      return {\n        ...state,\n        colors: state.colors,\n        sortedByAlpha: !state.sortedByAlpha,\n        filtered: state.filtered\n      };\n\n    case SORT_RGB:\n      if (state.filtered !== null) {\n        state.filtered.sort((a, b) =>\n          a.rgb[0] > b.rgb[0]\n            ? 1\n            : a.rgb[0] === b.rgb[0]\n            ? a.rgb[1] > b.rgb[1]\n              ? 1\n              : a.rgb[1] === b.rgb[1]\n              ? a.rgb[2] > b.rgb[2]\n                ? 1\n                : -1\n              : -1\n            : -1\n        );\n      }\n      state.colors.sort((a, b) =>\n        a.rgb[0] > b.rgb[0]\n          ? 1\n          : a.rgb[0] === b.rgb[0]\n          ? a.rgb[1] > b.rgb[1]\n            ? 1\n            : a.rgb[1] === b.rgb[1]\n            ? a.rgb[2] > b.rgb[2]\n              ? 1\n              : -1\n            : -1\n          : -1\n      );\n      if (state.sortedByRGB) {\n        state.colors.reverse();\n        if (state.filtered !== null) {\n          state.filtered.reverse();\n        }\n      }\n      return {\n        ...state,\n        colors: state.colors,\n        filtered: state.filtered,\n        sortedByAlpha: false,\n        sortedByRGB: !state.sortedByRGB\n      };\n    default:\n      return {\n        ...state\n      };\n  }\n};\n","export const FILTER_COLORS = \"FILTER_COLORS\";\nexport const CLEAR_FILTER = \"CLEAR_FILTER\";\nexport const SORT_ALPHA = \"SORT_ALPHA\";\nexport const SORT_ALPHA_FILTERED = \"SORT_ALPHA_FILTERED\";\nexport const SORT_RGB = \"SORT_RGB\";\n","import React, { useReducer } from \"react\";\nimport ColorContext from \"./colorContext\";\nimport ColorReducer from \"./colorReducer\";\nimport { FILTER_COLORS, CLEAR_FILTER, SORT_ALPHA, SORT_RGB } from \"./types\";\n\nconst ColorState = props => {\n  const hex_json = require(\"../data/colors-hex.json\");\n  const rgb_json = require(\"../data/colors-rgb.json\");\n\n  var color_array_rgb = [];\n  var color_array = [];\n\n  //eslint-disable-next-line\n  for (const [key, value] of Object.entries(hex_json)) {\n    var color_obj = {\n      color: key,\n      hex: value\n    };\n    color_array.push(color_obj);\n  }\n\n  //eslint-disable-next-line\n  for (const [key, value] of Object.entries(rgb_json)) {\n    color_obj = {\n      color: key,\n      rgb: value\n    };\n    color_array_rgb.push(color_obj);\n  }\n\n  /*\n    [{color, rgb, hex}, ...]\n  */\n\n  for (var i = 0; i < color_array.length; i++) {\n    for (var j = 0; j < color_array.length; j++) {\n      if (color_array[i].color === color_array_rgb[j].color) {\n        color_array[i].rgb = color_array_rgb[j].rgb;\n      }\n    }\n  }\n\n  const initialState = {\n    colors: color_array,\n    filtered: null,\n    sortedByAlpha: true\n  };\n  const [state, dispatch] = useReducer(ColorReducer, initialState);\n\n  const filterColors = text => {\n    dispatch({ type: FILTER_COLORS, payload: text });\n  };\n\n  const clearFilter = () => {\n    dispatch({ type: CLEAR_FILTER });\n  };\n\n  const sort_alpha = () => {\n    dispatch({ type: SORT_ALPHA });\n  };\n\n  const sort_rgb = () => {\n    dispatch({ type: SORT_RGB, payload: \"rgb\" });\n  };\n\n  return (\n    <ColorContext.Provider\n      value={{\n        colors: state.colors,\n        filtered: state.filtered,\n        sorted: state.sorted,\n        sortedByAlpha: state.sortedByAlpha,\n        filterColors,\n        clearFilter,\n        sort_alpha,\n        sort_rgb\n      }}\n    >\n      {props.children}\n    </ColorContext.Provider>\n  );\n};\n\nexport default ColorState;\n","import React from \"react\";\nimport Home from \"./components/Home\";\nimport Navbar from \"./components/Navbar\";\nimport \"./App.css\";\nimport ColorState from \"./context/colorState\";\n\nconst App = () => {\n  return (\n    <ColorState>\n      <Navbar />\n      <Home />\n    </ColorState>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}